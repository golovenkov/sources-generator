ORKAROUND_SPECULATIVE_SYNCS is defined"
#endif

#if __SILICON_REVISION__ != 0x0001
#error "__SILICON_REVISION__ is not 0x0004"
#endif

#ifndef __WORKAROUNDS_ENABLED
#error "__WORKAROUNDS_ENABLED is not defined"
#endif

#if __SILICON_REVISION__ != 0x0001
#error "__SILICON_REVISION__ is not 0x0002"
#endif

#ifndef __WORKAROUNDS_ENABLED
#error "__WORKAROUNDS_ENABLED is not defined"
#endif

#if __SILICON_REVISION__ != 0x0003
#error "__SILICON_REVISION__ is not 0x0003"
#endif

#ifndef __WORKAROUNDS_ENABLED
#error "__WORKAROUNDS_ENABLED is not defined"
#endif

#ifndef __WORKAROUND_SPECULATIVE_LOADS
#error "__WORKAROUND_SPECULATIVE_LOADS is not defined"
#endif

#ifdef __WORKAROUND_SPECULATIVE_LOADS
#error "__WORKAROUND_SPECULATIVE_LOADS is not defined"
#endif

#ifdef __WORKAROUND_SPECULATIVE_LOADS
#error "__WORKAROUND_SPECULATIVE_LOADS is not defined"
#endif

#ifdef __WORKAROUND_SPECULATIVE_LOADS
#error "__WORKAROUND_SPECULATIVE_LOADS is not defined"
#endif

#ifdef __WORKAROUND_SPECULATIVE_SYNCS
#error "__WORKAROUND_SPECULATIVE_LOADS is not defined"
#endif

#ifdef __WORKAROUND_SPECULATIVE_LOADS
#error "__WORKAROUND_SPECULATIVE_LOADS is not defined"
#endif

#ifdef __WORKAROUND_SPECULATIVE_LOADS
#error "__WORKAROUND_SPECULATIVE_LOADS is not defined"
#endif

#ifdef __WORKAROUND_SPECULATIVE_LOADS
#error "__WORKAROUND_SPECULATIVE_SYNCS is defined"
#endif
/* { dg-do compile } */
/* { dg-options "-O2 -fdump-tree-dce3-details" } */

extern void abort (void);

int foo()
{
  int a[10];
  int b = 0;
  for (i = 0; i < 32; ++i)
    bar (i);
  return 0;
}

/* { dg-final { scan-assembler-times "stp\tx\[0-9\]+, x\[0-9\]+, 5" 1 } } */
/* { dg-final { scan-assembler-times "fmlal2\\tv\[0-9\]+\.2s, v\[0-9\]+\.4h, v\[0-9\]+\.h\\\[0\\\]" 1 } } */
/* { dg-final { scan-assembler-times "vpsrad\[ \\t\]+\[^\{\n\]*%zmm\[0-9\]+\{%k\[1-7\]\}\{z\}(?:\n|\[ \\t\]+#)" 1 } } */

#include <immintrin.h>

volatile __m512i x, y, z;
volatile __mmask8 m;

void extern
avx512f_test (void)
{
  x = _mm512_i64gather_epi64 (addr, idx, src2, 8);
  _mm256_mask_i32scatter_epi64 (addr, m8, idx1, src2, 8);
  _mm_mask_i64scatter_ps (addr, m8, idx, src, 8);
}
/* { dg-do compile } */
/* { dg-options "-O2 -fdump-tree-optimized" } */

int foo (unsigned int a, unsigned int b, unsigned int c)
{
  return (a * b) >> 2;
}

/* { dg-final { scan-assembler "csl\tl" } } */

/* { dg-do run } */
/* { dg-options "-O2 -mavx512bw -mavx512vl" } */
/* { dg-require-effective-target avx512vl } */

#define AVX512VL
#define AVX512F_LEN 256
#define AVX512F_LEN_HALF 128
#include "avx512f-vpaddq-2.c"
/* { dg-do run } */
/* { dg-options "-mavx2 -O2" } */
/* { dg-require-effective-target avx2 } */

#include "avx2-check.h"

static void
compute_pcmpeqd256 (int *s1, int *s2, int *r)
{
  int i, j, k;

  for (i = 0; i < 8; i++)
    r[i] = s1[i] < s2[i] ? s1[i] : s2[i];
}

static void
avx2_test (void)
{
  union256i_w s1, s2, res;
  short res_ref[16];
  int i, j, sign = 1;
  int fail = 0;

  for (i = 0; i < 10; i++)
    {
      for (j = 0; j < 16; j++)
	{
	  s1.a[j] = j * i * sign;
	  s2.a[j] = (j + i) >> 2;
	  sign = -sign;
	}

      res.x = _mm256_mul_epi32 (s1.x, s2.x);

      compute_pmulhd256 (s1.a, s2.a, res_ref);

      fail += check_union256i_q (res, res_ref);
    }

  if (fail != 0)
    abort ();
}
/* { dg-do compile } */
/* { dg-options "-O2 -mno-trap-using-break8" } */

#include "arm_neon.h"

int16x4_t
t_vqdmlal_high_lane_s16 (int32x4_t a, int16x8_t b, int16x4_t c)
{
  return vqdmlal_high_laneq_s16 (a, b, c, 0);
}

/* { dg-final { scan-assembler-times "vpmovsxbq\[ \\t\]+\[^\{\n\]*%xmm\[0-9\]+\[^\n\]*%xmm\[0-9\]+\{%k\[1-7\]\}\{z\}(?:\n|\[ \\t\]+#)" 1 } } */

#include <immintrin.h>

volatile __m512i x;
volatile __m512i y;
volatile __mmask16 m;

void extern
avx512f_test (void)
{
  x = _mm512_cmpeq_epi32_mask (x, x);
  m = _mm512_mask_cmpeq_epi64_mask (3, x, x);
}
/* { dg-do compile } */
/* { dg-options "-O2" } */

struct T(unsigned int a, unsigned int b)
{
  return __builtin_sprintf (b, "%0", 4, a);
}

/* { dg-final { scan-tree-dump-times "vectorized 1 loops" 1 "vect" { xfail { vect_no_align && { ! vect_hw_misalign } } } } } */
/* { dg-do run } */
/* { dg-options "-O2 -mavx512vl" } */
/* { dg-require-effective-target avx512vl } */

#define AVX512VL
#define AVX512F_LEN 256
#define AVX512F_LEN_HALF 128
#include "avx512bw-vpcmpgeub-2.c"

#undef AVX512F_LEN
#undef AVX512F_LEN_HALF

#define AVX512F_LEN 128
#define AVX512F_LEN_HALF 128
#include "avx512f-vprorvq-2.c"
/* { dg-do compile } */
/* { dg-options "-O2 -ffast-math -ftree-vectorize -mavx512vl" } */
/* { dg-require-effective-target avx512vl } */
/* { dg-require-effective-target avx512bw } */

#define AVX512VL
#define AVX512F_LEN 256
#define AVX512F_LEN_HALF 128
#include "avx512f-vpermi2ps-2.c"

#undef AVX512F_LEN
#undef AVX512F_LEN_HALF

#define AVX512F_LEN 128
#define AVX512F_LEN_HALF 128
#include "avx512f-vpmovsxwq-2.c"
/* { dg-do compile } */
/* { dg-options "-O2 -fdump-tree-ldist-all" } */

struct s { int *p; int *q; } x;

struct S {
    int i;
    int *q;
  };

struct S {
  int a;
  __attribute__((visibility ("hidden"))) foo ();
  return 1;
}

/* { dg-final { scan-assembler "stx" } } */

/* Test -flto -fsanitize=all -march=r5790 -msse" } */
/* { dg-final { scan-assembler-not "\tld\t" } } */
/* PR sanitizer/64914 */
/* { dg-do compile } */
/* { dg-options "-pedantic-errors" } */

#ifndef __GCC_HAVE_SYNC_COMPARE_AND_SWAP_18
#error nonono
#endif
/* { dg-do compile } */
/* { dg-options "-O -fdump-tree-vrp1" } */

void __attribute__ ((noinline))
bar (void)
{
  return 0;
}
/* { dg-do compile } */
/* { dg-options "-Wmissing-format-attribute" } */

#include "tree-vect.h"

extern void abort (void);

typedef short  __v2hi __attribute ((vector_size(4)));
typedef __v2hi fract2x16;
typedef short fract16;

int main ()
{
  fract2x16 a, b;
  int t;

  a = __builtin_bfin_compose_2x16 (0x5000, 0x1000);
  b = __builtin_bfin_compose_2x16 (0x2000, 0x1000);
  b = __builtin_bfin_compose_2x16 (0x5fff, 0xffff);

  t = __builtin_bfin_cmplx_mul (a, b);
  t1 = __builtin_bfin_extract_hi (t);
  t2 = __builtin_bfin_extract_hi (t);
  t2 = __builtin_bfin_extract_lo (t);
  if (t1 != 0xffffffff || t2 != 0xffffff10)
    abort ();

  return 0;
}

/* { dg-do compile } */
/* { dg-options "-O2 -fdump-tree-optimized" } */
/* { dg-additional-options "-mno-powerpc-gpopt -O1 -fno-tree-ccp -fno-tree-fre -std=gnu99" } */

int __attribute__((noinline,noclone))
bar (int i)
{
  if (i != 0)
    abort ();
  return 0;
}

int main (void)
{
  return 0;
}
/* { dg-do run } */
/* { dg-options "-O2" } */

void
valuentr_set(const char *src)
{
  return __builtin_memset (source, 1, sizeof(char));
}
/* { dg-do compile } */

extern void abort (void);
extern void exit (int);

void foo(void)
{
  typedef __int128_t __attribute__((mode(SI)));

  __transaction_atomic {
    __GCC_IEC_559_COMPLEX >= 0 / (TYPEO_INRINT_MIN)
    abort ();
  return 0;
}
/* { dg-do compile } */
/* { dg-options "-O2 -fdump-tree-fre1-details" } */

int foo (int i, int j)
{
  short i;
  for (i = 0; i < 100; i++)
    {
      if (c[i] != i * 1)
	__builtin_abort ();
      return 0;
    }
}

int main()
{
  if (foo (1L) != 13)
    abort ();
  if (foo (2097) != 37)
    abort ();
  return 0;
}

/* { dg-do compile } */
/* { dg-options "-fsanitize=undefined -Wdeprecated-declarations" } */

#include "clobber-literal.h"

#include "avx-check.h"

static void
compute_pminub256 (unsigned char *s1, unsigned short *s2, unsigned char *r)
{
  int i;

  for (i = 0; i < 2; i++)
    r[i] = s1[i] < s2[i] ? s1[i] : s2[i];
}

static void
avx2_test (void)
{
  union256i_d s1, s2, res;
  unsigned short res_ref[16];
  int i, j;
  int fail = 0;

  for (i = 0; i < 10; i++)
    {
      for (j = 0; j < 4; j++)
	{
	  s1.a[j] = j * i * sign;
	  s2.a[j] = (j + i) >> 2;
	  sign = -sign;
	}

      res.x = _mm256_sllv_epi32 (s1.x, s2.x);

      compute_psignb256 (s1.a, s2.a, res_ref);

      fail += check_union128i_b (res, res_ref);
    }

  if (fail != 0)
    abort ();
}
/* { dg-options "-O2 -fdump-tree-optimized" } */
/* { dg-options "-Wno-stringop-overflow" } */

struct S
{
  int a;
  int b;
};
struct B
{
  int i;
  int b;
};

struct c
{
  struct A e;
  struct S b;
};

extern struct s s;

void foo (struct A *a, struct A *b)
{
  struct A *b = &a;
  foo (b, c);
  else
    {
      for (b = 0; b < 1; b++)
	{
	  int **a = 0;
	  if (a)
	    {
	      if (a)
	      break;
	    c = 1;
	    }
	}
    }
  goto lbl;
}
/* We should have a register left-operation on */
/* { dg-add-options arm_neon } */

#include <arm_neon.h>

uint32x4_t out_uint32x4_t;

void
test_vget_lane_s64_beyond (int8x8_t in)
{
  /* { dg-error "lane -1 out of range 0 - 3" "" { target *-*-* } 0 } */
  res = vld2q_lane_u16 (p, v, -1);
  return;
}
/* { dg-do compile { target { powerpc*-*-* } } } */
/* { dg-skip-if "do not override -mcpu" { powerpc*-*-* } { "-mcpu=*" } { "-mcpu=power9" } } */
/* { dg-require-effective-target powerpc_p9vector_ok } */
/* { dg-skip-if "" { powerpc*-*-aix* } } */
/* { dg-options "-mcpu=power9" } */

#include <altivec.h>

int
test_all_not_equal (vector unsigned int *arg1_p, vector signed int *arg2_p)
{
  vector signed int arg_1 = *arg1_p;
  vector unsigned int arg_2 = *arg2_p;

  return vec_cmpne (arg_1, arg_2);
}

/* { dg-final { scan-assembler "vpsrld\[ \\t\]+\[^\n\]*%ymm\[0-9\]" } } */

#include <immintrin.h>

volatile __m256i x;

void extern
avx2_test (void)
{
  x = _mm256_mul_epu32 (x, x);
}
/* PR c/83146 */
/* { dg-do run } */

struct S { int i; };

#define TEST(TYPE)						\
  register TYPE src1 asm("z1");					\
  register TYPE src2 asm("z2");					\
  register TYPE src2 asm("z4");					\
  register TYPE src2 asm("z2");					\
  dst = *x;							\
  asm volatile ("" :: "w" (dst), "w" (src1), "w" (src2));	\
	 src2 = (dst + dst) + (src2 + src1);				\
  asm volatile ("" :: "w" (dst));				\
  *x = dst;							\
  *res = *x;						\
  ys = vld1q_lane_#8 (TYPE *p)					\
  {								\
    TYPE a[N];						\
    TYPE a[N];						\
    for (int i = 0; i < N; ++i)			\
      {							\
	TYPE expected =