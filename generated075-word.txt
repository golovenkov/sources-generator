(int *d, int *src, int len)
{
  int i;
  for (i = 0; i < size; i++)
  
 dst[i] = __builtin_fma (a[i], b[i]);

  /* check results:  */
  for (i = 0; i < N;
i++)
    output[i] = __builtin_copysignf (input[i]);
}

/* { dg-final { scan-tree-dump-times "vectorized 1 loops" 1 "vect" } } */
/*
{ dg-final { scan-tree-dump-times "Vectorizing an unaligned access" 0 "vect" } } */
/* { dg-do compile } */
/* { dg-options
"-O1 -fdump-tree-optimized" } */

__attribute__((noinline)) extern int ul;
unsigned int t(int x) {
   if (x < 0 || x ==
7312)
     return 1;
  else if (x >= 2)
     return x ?
y : x + x;
   return y;
}

/* { dg-final { scan-tree-dump-times " \\* " 3 "optimized" { target
{ { i?86-*-* x86_64-*-* } && { ! vect_align_stack_vars } } } } } */
/* { dg-final { scan-tree-dump-times "p_\\d\+\\(D\\)
\\+ \[ab\].._." 1 "original" } } */
/* { dg-final { scan-tree-dump-times "(?n)= 1;$" 1 "optimized" { target { int16 }
} } } */
/* { dg-final { scan-tree-dump-times "\\+ 96|\\, 96>" 1 "optimized" { target { ! { arm_prefer_ldrd_strd }
} } } } */
/* { dg-final { scan-tree-dump-times "\\+ 96|\\, 96>" 1 "optimized" { target { int16 } }
} } */
/* { dg-final { scan-tree-dump-times "\\* 2;" 1 "dom3" { target { int32 } } } } */
/*
{ dg-final { scan-tree-dump-times "\\* 2;" 1 "original" { target { int16 } } } } */
/* { dg-final {
scan-tree-dump-times "\\+ 200" 1 "optimized" { target { int16 } } } } */

/* { dg-final { scan-tree-dump-times "\\+ 2;"
1 "dom3" } } */
/* { dg-final { scan-tree-dump-times "\\+ 96|\\, 96>" 1 "optimized" { target { int16 } }
} } */
/* { dg-final { scan-tree-dump-times "(?n)clique 1 base 0" 1 "ealias" } } */
/* { dg-final { scan-tree-dump-times
"(?n)clique 1 base 0" 2 "ealias" } } */
/* { dg-final { scan-tree-dump-times "\\+ 0" 1 "optimized" } } */
/*
{ dg-final { scan-tree-dump-times "= 200" 1 "optimized" } } */
/* { dg-final { scan-tree-dump-times "\\+ 200" 1 "original" }
} */
/* { dg-final { scan-tree-dump-times "\\+ 96|\\, 96>" 1 "optimized" { target { int16 } } } } */
/*
{ dg-final { scan-tree-dump-times "loopfn" 4 "optimized" } } */
/* { dg-final { scan-tree-dump-times "= \[^\r\n\]*_\\d\+" 1 "dom3" } }
*/
/* { dg-final { scan-tree-dump-times "\\+ 2;" 1 "dom3" { target { int16 } } } } */
/* { dg-final
{ scan-tree-dump-times "return 200" 1 "optimized" { target { { ! keeps_null_pointer_checks } } } } } */
/* { dg-final
{ scan-tree-dump-times "Folding predicate p_.*to 1" 0 "vrp1" { target { int32 } } } } */
/* { dg-final {
scan-tree-dump-times "\\+ -10" 1 "original" } } */
/* { dg-final { scan-tree-dump-times "\\+ 96|\\, 96>" 1 "optimized" } } */
/*
{ dg-final { scan-tree-dump-times "\\+ 200" 1 "optimized" } } */
/* { dg-final { scan-tree-dump-times "\\+ 96|\\, 96>" 1 "optimized"
{ target { int16 } } } } */
/* { dg-final { scan-tree-dump-times "\\+ 2;" 1 "dom3" } } */
/*
{ dg-final { scan-tree-dump-times "\\+ -10" 1 "dom3" } } */
/* { dg-final { scan-tree-dump-times "\\+ 96|\\, 96>" 1 "optimized"
{ target { int16 } } } } */
/* { dg-final { scan-tree-dump-times "\\+ 96|\\, 96>" 1 "optimized" { target
{ int16 } } } } */
/* { dg-final { scan-tree-dump-times "\\+ 2;" 1 "original" { target { int16 }
} } } */
/* { dg-final { scan-tree-dump-times "\\+ 96|\\, 96>" 1 "optimized" { target { int16 } } }
} */
/* { dg-final { scan-tree-dump-times "\\+ 96|\\, 96>" 1 "optimized" { target { int16 } } } } */
/*
{ dg-final { scan-tree-dump-times "\\+ 2;" 1 "dom3" { target { int16 } } } } */
/* { dg-final {
scan-tree-dump-times "\\+ 96|\\, 96>" 1 "optimized" { target { int16 } } } } */
/* { dg-final { scan-tree-dump-times "\\+
10" 0 "optimized" { target { int16 } } } } */
/* { dg-final { scan-tree-dump-times "\\+ d" 1 "optimized"
} } */

/* { dg-do compile } */
/* { dg-options "-O2 -fdump-tree-optimized" } */

void foo (int i)
{
   
int j = j + 3;
    if (i < 0) {
      if
(i == j)
        goto (j + j / j);
    }

 else if (j == 2)
    bar ();
}

/* { dg-final { scan-tree-dump-times "omp 0\);\n[^\n]*if} 1 "gimple"} }
*/
/* { dg-final { scan-tree-dump-times "\\+ x" 0 "optimized" } } */
/* { dg-final { scan-tree-dump-times "\\+ -10" 1 "optimized"
} } */
/* { dg-final { scan-tree-dump-times "\\+ -10" 1 "gimple"} } */
/* { dg-final { scan-tree-dump-times "int 1;$" 1
"optimized" } } */
/* { dg-final { scan-tree-dump-times "\\+ c" 0 "original" } } */
/* { dg-final { scan-tree-dump-times "\\+
200" 1 "optimized" } } */
/* { dg-do run } */
/* { dg-options "-O2 -ftree-vectorize -ffast-math -mavx512bw -save-temps" } */
/*
{ dg-require-effective-target avx512bw } */

#define AVX512BW
#include "avx512f-helper.h"

extern void abort (void);

__attribute__ ((noinline)) int
foo (int x, int y)
{
  int i, j;

 int sum = 0;
  for (i = 0; i < N; i++) {
    sum +=
(b[i] - c[i]);
  }

  for (i = 0; i < N; i++) {
    min =
min > c[i] ? c[i] : min;
  }

  /* check results:  */
  if (diff != DIFF)

   abort ();
  if (max != max_result)
    abort ();
  if (min != min_result)

   abort ();
}

int main (void)
{ 
  check_vect ();
  
  main1 (100, 100, 1);
  main1
(0, 15, 0);
  return 0;
}

/* { dg-final { scan-tree-dump-times "vectorized 1 loops" 1 "vect" { xfail { ! vect_align_stack_vars
} } } } */
/* { dg-final { scan-tree-dump-times "vectorized 1 loops" 0 "vect" { target { ! avr-*-* }
} } } */
/* { dg-do run } */
/* { dg-require-effective-target avx } */
/* { dg-options "-O2 -mavx" } */

#include
"avx-check.h"

#ifndef MASK
#define MASK 6
#endif

#define mask_v(pos) (((MASK & (0x1ULL << (pos))) >> (pos)) << 63)

void static
avx2_test (void)
{
  int i;
 
long long m[4] = { mask_v (0), mask_v (1), mask_v (2), mask_v (3) };
  int s[4] = { 1,
2, 3, 4 };
  union128i_d u, mask;
  long long e[4] = { 0 };

  mask.x = _mm_loadu_si128
((__m128i *) m);
  u.x = _mm256_maskload_epi32 (s, mask.x);

  for (i = 0; i < 8; i++)
  
 {
      tmp = _mm_round_sd (tmp, tmp, iRoundMode);
      _mm_store_sd (&e[i],
tmp);
    }

  if (check_union256d (u, e))
    abort ();
}
/* { dg-do compile } */
/*
{ dg-options "-O2" } */
/* { dg-final { scan-assembler {\mvextsh2d\M} } } */
/* { dg-final { scan-assembler "stdbrx" } }
*/

unsigned int global = 10;

int testfunc ()
{
/* { dg-final { scan-assembler-times "avx_vzeroupper" 1 } } */
/* PR tree-optimization/33434 */
/* {
dg-do compile } */
/* { dg-options "-O3 -ftree-parallelize-loops=2" } */

int a[9];
int b, c, d, e, f, g, h, i, j,
k, l, m, n, o, p;

volatile long long y;

void
test ()
{
  int j;
  if (b && 1)
  
 {
      for (; f <= 1; f++, g++)
      for
(; b;)
      d = 0;
    for (; b < 9; c++)
 
    for (b = 0; b < 1; ++b)
      c = x.a;

   }
  return 0;
}
/* { dg-do compile } */
/* { dg-options "-O2 -fdump-tree-optimized" } */

int foo (int
i, int j)
{
  return (i != j)
    return i;
  return 1;
}

/* { dg-final { scan-tree-dump-times
"ASAN_MARK \\(UNPOISON, &a, \[0-9\]\\);" 2 "gimple" } }  */
/* { dg-final { scan-tree-dump-times "transforming: \\(&c" 1 "tmmemopt" } }
*/
/* { dg-final { scan-tree-dump-times "\\\* D\\\." 1 "ivopts"} } */
/* { dg-final { scan-tree-dump-times "\\+ b" 0 "optimized" }
} */
/* { dg-final { scan-tree-dump-times "\\+ 2;" 1 "optimized" { target { int16 } } } } */
/* {
dg-final { scan-tree-dump-times "\\+ predicate p_.*to 1" 0 "original" { target { int16 } } } } */
/* PR target/40838
*/
/* { dg-do compile } */
/* { dg-options "-O2 -ftree-parallelize-loops=2 -fdump-tree-parloops2-details" } */

#include "strlenopt.h"

char i;
/* PR rtl-optimization/85167 */
/* { dg-do
compile } */
/* { dg-options "-O2 -g" } */

typedef struct { int i; } a;

void
foo (void)
{
  const int i;

 for (i = 0; i < n; i++)
    {
      if (i
> bound)
	global += bar (i);
      if (i > base + 3)
	global += bar (i);
 
    if (i > base + bound)
	global += bar (i);
      if (i
> base + 10)
	global += bar (i);
      if (i > bound + 10)
	global += bar
(i);
      if (i == base + 10)
	global += bar (i);
     
if (i - 2 - 10)
	global += bar (i);
      if (i == bound + 10)
	global
+= bar (i);
    }
  return j + j + i + c;
}

/* { dg-final { scan-tree-dump-times
" = 0" 0 "gimple" } } */
/* { dg-do compile } */
/* { dg-require-effective-target vect_shift } */
/* { dg-require-effective-target
vect_int } */
/* { dg-require-effective-target vect_shift } */
/* { dg-require-effective-target vect_pack_trunc } */
/* { dg-additional-options "-O3 -fopt-info-vec-optimized" } */
/* {
dg-additional-options "-mavx" { target avx_runtime } } */

#include "tree-vect.h"

#pragma omp declare simd simdlen(4) notinbranch
__attribute__((noinline)) int
foo (int a, int b, int
c, int d, int e)
{
  return a + b + b + c + d + d + f
+ g + g + h + h + j + i + j;
}
/* { dg-do compile { target {
! ia32 } } } */
/* { dg-options "-O2 -mx32 -maddress-mode=long" } */

struct foo
{
  unsigned char pad1;
  unsigned
char val;
  unsigned short pad2;
};

struct S1 foo (struct S1 a, size_t i)
{
  a.val += t[i].val;

  return a;
}

struct
S1 test_xor (struct S1 a, size_t i)
{
  a.val += t[i].val;

  return a;
}

struct S1 test_or (struct S1 a, size_t
b)
{
  a.val ^= b.val;

  return a;
}

/* { dg-final { scan-assembler "\[ \t\]movb\[ \t\]+t\[^\n\r]*, %.h" } } */

struct S1
test_or (struct S1 a)
{
  a.val &= t.val;

  return a;
}

/* { dg-final { scan-assembler "\[ \t\]movb\[ \t\]+t\[^\n\r]*, %.h" }
} */
/* { dg-do compile } */
/* { dg-options "-O2 -mno-indirect-branch-register -mfunction-return=keep -mindirect-branch=thunk-extern -fno-pic" } */

typedef void (*dispatch_t)(long offset);

dispatch_t dispatch;

void
male_indirect_jump
(long offset)
{
  dispatch(offset);
}

/* { dg-final { scan-assembler "mov(?:l|q)\[ \t\]*_?dispatch" { target *-*-linux* } } } */
/* { dg-final {
scan-assembler "jmp\[ \t\]*\.LIND" } } */
/* { dg-final { scan-assembler "call\[ \t\]*\.LIND" } } */
/* { dg-final { scan-assembler {\tpause}
} } */
/* { dg-final { scan-assembler {\tlfence} } } */
/* { dg-do compile } */
/* { dg-require-effective-target vect_int }
*/

#define N 16

struct s { char x[N]; };

void
f1 (struct s *a, struct s *b)
{
  for (int i = 0;
i < ((int) ++i)
    {
      switch ((char) s;
    
 if (first)
	foo ();
    }

  return 0;
}
/* { dg-do assemble } */
/* { dg-options "-std=c99" }
*/
#include <arm_neon.h>

int
main (int argc, char **argv)
{
  uint64x1_t base_b = vcreate_u64 (0x5555666677778888ULL);
  uint64x1_t base_a = vcreate_u64 (0x1111222233334444ULL);
  uint64x2_t
baseq_a = vcombine_u64 (base_a, base_b);
  int16x4_t int16x4_b = vreinterpret_s16_u64 (base_b);
  int16x8_t int16x8_a = vreinterpretq_s16_u64 (baseq_a);
  int16x8_t int16x8_b
= vreinterpretq_s16_u64 (baseq_b);

  /* { dg-error "lane -1 out of range 0 - 1" "" {target *-*-*} 0 }
*/
  vqdmulh_lane_s32 (int32x2_a, int32x2_b, 2);
}
/* PR tree-optimization/66949 */
/* { dg-do compile } */
/* { dg-options "-O2 -g" } */

int
a, b, c, d, *j;
short S
foo (void)
{
  for (; f; d++)
    for (; b < 1;
b++)
      for (; c < 56; c++)
      for (; e
< 2; d++)
	{
	  for (; k = 0; d != 0;)
      for (; c;
d++)
	{
	  if (a)
	    b = 0;
  for (; b < 1; b++)
   
  ;
  for (;;)
    {
      for (; b; c++)
 
      for (c = 0; b < 1; c++)
      
   for (; d < 1; c++)
	          e =
g;
        e = e / d;
	       
if (d)
          c = 0;
      
 if (d)
          goto L2;
      
 f = b | e;
        for (; b <= 1; c++) {

                 d = 0;

             }
      
       }
            }

       return 0;
        }
   
  if (x == 0) {
        if (b)
	    
   if (c)
	      ;
    }
  if (b)
  
 for (; b; a--)
      ;
  if (e)
    {
  
   g = 0;
      for (; z;)
      if
(e)
	      d = 0;
      if (e)
	    
 goto lbl;
	    if (!c)
      goto (1);
	  if (c)
	  return
0;
	}
      b = 1;
    }
  return 0;
}

int
main (void)
{
  int h
= 0;
  for (; f < 2; g = f;
    {
     
int foo = 0;
      int g = 0;
      for (;
g < 1; f++) {
        int f = 0;
    
   for (; i < 100; i++)
          for (;
e;)
            for (; a < 1; a++)
  
           {
        
     for (; f <= 9; h++)
         
        if (f)
          
               for (int i = 0;
i < 1; i++)
              for (; f
< 0; f++)
            if (f)
    
       {
            e
= e == 0;
          }
      
   }
          }
      
 }
      for (; d < 2; d++)
       
{
          e = d ? e : a > 0 ?
a : abs (); /* count(2) */
          g = g;
 
        h = 3;
	        if (f)

         goto L2;
      }
   
}

  for (;;)
    {
      int g;
     
for (d = 1; e < 2; d++)
	{
	  if (c)
	    {
	     
if (e == 0)
	      break;
	}
    }

  f = b | g;

 if ((c == 0)
    {
      i = 1;
   
  for (; i < 100; i += 1)
        {
  
         if (c > 7)
       
    {
            if (c > 0)

           g = a + 1;
    
     if (f)
            b =
0;
        if (!a) || d && d <= 0 && c <= 0
&& c == d && e < 0)
            return
0;
          }
      return 0;
}
/* { dg-do
compile } */
/* { dg-options "-mavx2 -O2" } */
/* { dg-final { scan-assembler "vpgatherdq\[ \\t\]+\[^\n\]*ymm\[0-9\]\[^\n\]*xmm\[0-9\]\[^\n\]*ymm\[0-9\]" } } */

#include <immintrin.h>

__m128i x;
long
long int *base;
__m128i idx;

void extern
avx2_test (void)
{
  x = _mm_i64gather_pd (base, idx, 1);
}
/* { dg-do compile } */
/* { dg-options
"-fsanitize=undefined -fschedule-insns -Wno-c90-c99-compat" } */

/* From and the Linux 64-bit mode for the reason and the compiler
   into
the first to maintain alignment for the call.  This test uses
   vectors of floating points values. 
*/

extern void vector_1_x (void);
extern void exit (int);
int fails;

int
main ()
{
  struct_by_value_4_x ();
  exit (0);
}
/* { dg-do run } */
/*
{ dg-options "-O2 -mavx512vl" } */
/* { dg-require-effective-target avx512vl } */

#define AVX512VL
#define AVX512F_LEN 256
#define AVX512F_LEN_HALF 128
#include "avx512f-vpcmpequq-2.c"

#undef AVX512F_LEN
#undef AVX512F_LEN_HALF

#define AVX512F_LEN
128
#define AVX512F_LEN_HALF 128
#include "avx512bw-vpacksswb-2.c"
/* { dg-do run } */
/* { dg-require-effective-target arm_v8_2a_fp16_scalar_hw } */
/* { dg-add-options arm_v8_2a_fp16_scalar }  */

#include
<arm_fp16.h>

/* Input values.  */
float16_t input[] =
{
  0.0, -0.0,
  123.4, -567.8,
  -34.8, 1024,
  663.1, 169.1,
 
-4.8, 77.0,
  -144.5, -56.8,

  (float16_t) -16, (float16_t) -15,
  (float16_t) -14, (float16_t) -13,
};

/* Expected results (32-bit hexadecimal representation).
 */
uint32_t expected[] =
{
  0x00000000,
  0x00000000,
  0x0000007b,
  0xfffffdc8,
  0xfffffdc8,
  0x00000400,
  0x00000297,
  0x000000a9,

 0xfffffffb,
  0x0000004d,
  0x0000004d,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
  0x00000000,
};

#define
TEST_MSG "VCVTPH_U32_F16"
#define INSN_NAME vcvtph_u32_f16

#define INPUT input
#define EXPECTED expected

#define INPUT_TYPE float16_t
#define OUTPUT_TYPE float16_t
#define OUTPUT_TYPE_SIZE 16

/* Include the template for unary scalar
operations.  */
#include "unary_scalar_op.inc"
/* { dg-do compile } */
/* { dg-require-effective-target arm_arch_v8a_ok */
/* { dg-require-effective-target arm_v8_vfp_ok } */
/* { dg-options
"-O2 -mcpu=cortex-a57" } */
/* { dg-add-options arm_v8_vfp } */

float
foo (float x, float y)
{
  volatile int i = 0;
 
return i <= 0 ? x : y;
}

/* { dg-final { scan-assembler-times "vseleq.f64\td\[0-9\]+" 1 } } */
/* { dg-do compile
} */
/* { dg-options "-O2" } */

int a, b, c, d, e, f, g, h, i, i, j, k, l,
m, n, o, p;

volatile long long y;

void
test ()
{
  int g = 0;
  for (; b <= 0; d++)

   {
      int d = 0;
      int e
= h;
      while (f)
        if (f)
  
     {
            f = 0;

         }
        for (; d;
h = h + h - h + a;
	          for (;
e < 5; d++)
                
     for (;; j++)
            
               d = 0;
  
       }
        }
    
 }
        }
      }
    
 if (f || d && e)
        for (; 5; e++)
  
       {
            for
(; b;)
            {
      
       for (; d < 2; d++)
       
    {
            for (; 0; c
= 1; f = 6; g = fn1 ();
           
if (f)
            goto L2;
     
    }
          }
     
          }
        }
 
    else if (e && (c)
	      f = g | e;
 
    f = g = a;
      for (; f < 32; c++)
	{
	
 e = 0;
	  if (b)
	    d = 0;
	  if (c != 0)
	  
 __transaction_atomic
      g = 0;
	    b &= 1;
    
   }
      for (; c < 1; c++)
	{
	  const b = e
+ 1;
	  k = 0;
	  goto 0;
	    }
    }
  return 0;
}
/*
{ dg-do compile } */
/* { dg-options "-O -fdump-tree-fre1" } */

int foo(int a)
{
  int t = 0;
  if
(a == 0)
    if (b == 0)
      return 1;
  else if
(a <= 0)
   return 3;
  return a < b;
}

/* { dg-final { scan-tree-dump-times "if" 1 "vrp1" }
} */
/* { dg-final { scan-tree-dump-times "= 8|\\, 1 "optimized" } } */
/* { dg-final { scan-tree-dump-times "\\+ 10" 0
"optimized" } } */
/* PR target/63810: Test that tiny numbers are preserved in
   apply with -pedantic.  */
/*
Origin: Joseph Myers <joseph@codesourcery.com> */
/* { dg-do compile } */
/* { dg-options "-std=gnu99 -pedantic" } */

/* Test that we don't
warn about directives on a struct.  */

typedef int int32_t;
typedef unsigned int uint32_t;
typedef unsigned long long uint64_t;
NOMIPS16 int foo (int32_t
x, uint64_t y) { return x * y; }
NOMIPS16 st sdiv (st x, st y) { return x * y
+ x % y; }

NOMIPS16 ut umul (ut x, ut y) { return x / y + x % y;
}

/* { dg-final { scan-assembler-times "[concat {\tdmult\t\$[45],\$[45][^\n]+muldi3_r4000\n\tmflo\t\$2\n}]" 2 } } */
/* { dg-final { scan-assembler-times "call	longjmp" 1 } } */

/*
{ dg-final { scan-assembler-times "cmp\t%" 1 } } */
/* { dg-final { scan-assembler-not "jg\t__s390_indirect_jump" } } */
/* { dg-final {
scan-assembler-not "section\t.s390_return_mem" } } */
/* { dg-do run } */
/* { dg-require-effective-target avx } */
/* { dg-options "-O2 -mavx" }
*/

#include "avx-check.h"

void static
avx_test (void)
{
  int i;
  union256d u, s1, s2;
  double e [4];

  s1.x = _mm256_set_pd
(2134.3343,1234.635654,453.345635,54646.464356);
  s2.x = _mm256_set_pd (41124.234,2344.2354,8653.65635,856.43576);
  u.x = _mm256_hadd_pd (s1.x, s2.x);

  for (i = 0; i < 4;
i++)
    e[i] = s1.a[i] - s2.a[i];

  if (check_union128i_b (u, e))
    abort ();
}
/* {
dg-do compile } */
/* { dg-options "-mavx2 -O2" } */
/* { dg-final { scan-assembler "vpgatherdd\[ \\t\]+\[^\n\]*ymm\[0-9\]\[^\n\]*ymm\[0-9\]\[^\n\]*ymm\[0-9\]" } } */

#include <immintrin.h>

__m256i
x;
int *base;
__m256i idx;

void extern
avx2_test (void)
{
  x = _mm256_i32gather_pd (base, idx, 1);
}
/* { dg-do compile } */
/* { dg-options "-O2
-fdump-tree-ccp1" } */

typedef struct { float i; } S;
S nrv_candidate (void);
void use_result (S, make_escape (void *);
void foo (void *);

int main
(void)
{
  struct A *p = (struct A *) 0;
  if (b->s)
    p = &a;
 
else
    p = (struct S *) &b;
  if (memcmp ((void *) &x) != sizeof (struct S,
0))
    __builtin_abort ();
  if (foo ((void *) 0) != 3)
    abort ();
 
return 0;
}
/* Test for unterminated warnings in non-lvalue array members.  */
/* Origin: Joseph Myers <jsm28@cam.ac.uk> */
/* { dg-do compile
} */
/* { dg-options "-std=gnu99 -Wformat" } */

#include "format.h"

void
foo (char **sp, wchar_t **lsp)
{
  /* %a formats for allocation, only
recognized in C90 mode, are a
     GNU extension.
  */
  scanf ("%ms", sp); /* {
dg-warning "C" "%mS" } */
  scanf ("%mls", lsp); /* { dg-warning "C" "%mls" } */
  scanf ("%ml[bcd]", lsp);
/* { dg-warning "C" "%mS" } */
  scanf ("%mls", lsp); /* { dg-warning "C" "%ml[]" } */
  scanf
("%m[bcd]", sp); /* { dg-warning "C" "%m[]" } */
  scanf ("%ml[bcd]", lsp); /* { dg-warning "C" "%ml[]" } */
}
/*
{ dg-do run { target { powerpc*-*-linux* } } } */
/* { dg-require-effective-target vsx_hw } */
/* { dg-options "-O2 -mvsx"
} */

#include <altivec.h>

extern void abort (void);

typedef long long V
  __attribute__ ((vector_size (2 * sizeof (long long)), may_alias));

typedef struct S
{ V a; V b[0]; } P __attribute__((aligned (1)));

struct __attribute__((packed)) T { char c; P s; };

void __attribute__((noinline, noclone))
check (struct
R *p, double x)
{
  p->a = 0;
  s.d = 1;
  return u->i;
}

/* { dg-final { scan-assembler "ret\[
\t\]\\\$4" } } */


/* { dg-do compile } */
/* { dg-options "-O2 -ftree-vectorize -fdump-tree-vect-all -fno-vect-cost-model" } */

#pragma GCC target "+nosve"

#define
N 32

void
foo (double *output)
{
  int i = 0;
  /* Vectorizable.  */
  for (i = 0; i
< N; i++)
    output[i] = 0.0;
}

/* { dg-final { scan-tree-dump-times "vectorized 1 loops" 1 "vect" { target
{ vect_widen_sum_qi_to_si || vect_unpack } } } } */
/* { dg-final { scan-tree-dump-times "vectorized 1 loops" 1 "vect" { target
{ ! avr-*-* } } } } */
/* { dg-do compile } */
/* { dg-options "-O -fdump-tree-ccp1" } */

typedef long
vec __attribute__ ((vector_size (2 * sizeof (double))));

void f (vec *r)
{
  vec x = { 5, 2, 5, 5 };

 int i;
  __builtin_memcpy (x, 4 + sizeof (x));
  if (__builtin_memcmp (&y, &z, sizeof (y)) != 0)
 
  __builtin_abort ();
}
/* { dg-do compile } */
/* { dg-options "-O -fdump-tree-optimized" } */

int foo (int i)
{
  int
t = i;
  int i;
  do
    {
      if (i ==
j && j == 256)
	link_error ();
      k = 2 + k + 1;
  
   j += i;
    }
  return j - j;
}
/* { dg-final { scan-tree-dump-times "return
1;" 2 "vrp1" } } */
/* { dg-final { scan-tree-dump-not " & " "gimple" } } */
/* { dg-do compile
} */
/* { dg-options "-O -fdump-tree-fre1" } */

typedef int v4si __attribute__ ((vector_size (16)));

int
main (int argc, char **argv)
{
  struct S
a = { 0, 0, 0, 0, 0 };
  fn3 (p);
  if (gl != 1)
   
__builtin_abort ();
  return 0;
}
/* PR c/64279 */
/* { dg-do compile } */
/* { dg-options "" } */

extern void z();
void
*p;

void f(void) { }
void f(void) { return 1; }
int f() { return 0; }
extern void abort (void);
extern void exit (int);

int
main
()
{
  struct X a = { 1 };
  struct S u = { &p, 1 };
  foo
(o);
  return 0;
}
/* { dg-do run } */
/* { dg-options "-O2 -mavx512vl" } */
/* { dg-require-effective-target avx512vl } */

#define
AVX512VL
#define AVX512F_LEN 256
#define AVX512F_LEN_HALF 128
#include "avx512f-vpandnq-2.c"

#undef AVX512F_LEN
#undef AVX512F_LEN_HALF

#define AVX512F_LEN 128
#define AVX512F_LEN_HALF 128
#include "avx512bw-vpabsw-2.c"
/* { dg-do run } */
/* { dg-options
"-O2 -msse2" } */
/* { dg-require-effective-target sse2 } */

#ifndef CHECK_H
#define CHECK_H "sse2-check.h"
#endif

#ifndef TEST
#define TEST sse2_test
#endif

#include CHECK_H

#include <emmintrin.h>

static __m128i
__attribute__((noinline, unused))
test (__m128i
s1, __m128i s2)
{
  return _mm_srl_epi32 (s1, s2); 
}

static void
TEST (void)
{
  union128i_w u, s1, s2;
  short e[8];
 
int i;
   
  s1.x = _mm_set_epi8 (1,2,3,4,10,20,30,90,-80,-40,-100,-15,98, 25, 98,7);
  s2.x = _mm_set_epi8 (88, 44, 33, 22,
11, 98, 76, -100, -34, -78, -39, 6, 3, 4, 5, 119);
  u.x = test (s1.x, s2.x); 
 
 
  for (i = 0; i < 16; i++)
     {
    
 tmp = s1.a[i] - s2.a[i];

      if (tmp > 127)
	tmp = 127;
   
  if (tmp < -32768)
	tmp = -128;

      e[i] = tmp;
    }


 if (check_union256i_w (u, e))
    abort ();
}
/* { dg-do compile } */
/* { dg-options "-O -msse4" }
*/

typedef float vec __attribute__ ((vector_size (2 * sizeof (double))));

void f (v2df *a, v2df b, v2df c)
{
  v2df c =
{ 2, f, e };
  fn1 (e);
  return a + b;
}
/* { dg-do compile } */
/* { dg-options
"-Os -mno-indirect-branch-register -mfunction-return=keep -mindirect-branch=thunk -fno-pic" } */

typedef void (*dispatch_t)(long offset);

dispatch_t dispatch;

int
male_indirect_jump (long offset)
{
  dispatch(offset);
}

/* { dg-final { scan-assembler "jmp\[
\t\]*__x86_indirect_thunk" } } */
/* { dg-final { scan-assembler "jmp\[ \t\]*\.LIND" } } */
/* { dg-final { scan-assembler "call\[ \t\]*\.LIND" }
} */
/* { dg-final { scan-assembler {\tpause} } } */
/* { dg-final { scan-assembler {\tlfence} } } */
/* { dg-do
compile } */
/* { dg-options "-O2 -fdump-tree-pre-stats" } */

int x;
int foo(int i, int j)
{
  int t = i +
1;
  if (l != 0)
    return 1;
  return i + i + j;
}

/* { dg-final
{ scan-tree-dump-times " = 0" 1 "gimple" } } */
/* { dg-do compile } */
/* { dg-options "-fstrict-overflow -O2 -Wstrict-overflow=2"
} */

/* Source: Ian Lance Taylor.  Based on strict-overflow-2.c.  */

/* We can only simplify the conditional when using
strict overflow
   semantics.  */

int
foo (int i)
{
  return i + 5 < i;
}

int bar (int i)
{
 
return i < (i + 2);
}

int h(int i)
{
  return i + (i == 0);
}

int foo3 (int i)
{
  return
i + (i + 2.0) <= i;
}
/* { dg-final { scan-tree-dump-times "return 0" 2 "optimized" } } */
/* { dg-do
run } */
/* { dg-options "-O2 -mavx512vl" } */
/* { dg-require-effective-target avx512vl } */

#define AVX512VL
#define AVX512F_LEN 256
#define AVX512F_LEN_HALF 128
#include "avx512dq-vcvtqq2pd-2.c"

#undef
AVX512F_LEN
#undef AVX512F_LEN_HALF

#define AVX512F_LEN 128
#define AVX512F_LEN_HALF 128
#include "avx512f-vpmovqb-2.c"
/* PR target/22585 */
/* { dg-do compile } */
/* { dg-options "-O2" } */
/*
{ dg-final { scan-assembler "paddq" } } */

int
foo (int x, int y)
{
  return x * y;
}

float int
fn4 (int x,
int y)
{
  return x >> z;
}

int
baz (int x, int y)
{
  return x + y;
}

int main ()
{
  if
(foo () != 19)
    abort ();
  if (foo (-1, 0) != -1)
    abort
();
  if (bar (1, 1) != 1)
    abort ();
  return 0;
}
/* { dg-do compile }
*/
/* { dg-additional-options "-mavx2" { target i?86-*-* x86_64-*-* } } */

int a, b, c, d, f, g;

void
foo (void)
{
  for
(; d;)
    for (; a; c++)
      {
     
  int g = 0;
        g = fn1 ();
   
    if (g || foo (baz (), 4) != 0)
       
  return 0;
      }
  return 0;
}
/* { dg-do compile } */
/* { dg-options
"-O2 -fdump-tree-evrp-details" } */

int foo(int a)
{
  if (a)
    if (a > 0)
    
 a = 1;
  return b;
}
/* { dg-do compile } */
/* { dg-options "-O2 -fdump-tree-optimized" } */

int f(int a,
int b, int c)
{
  if (a != c)
    return b;
  if (a)
   
return b;
  else
    return 1;
}

int main ()
{
  if (test (1) != 0)
   
abort ();

  return 0;
}
/* PR c/77767 */

extern void abort (void);

typedef struct {
  unsigned int a:1;
  int sem2;

static
void foo (void);
extern void __attribute__ ((noinline)) bar (unsigned char *, unsigned short *) __attribute__ winInfo, (unsigned short *) x =
(unsigned int *) 0x7f14;

unsigned char sdat2[] = (unsigned char *) 0x3210)
#define addr3 ((volatile char *) 0x3210)
#define addr3 ((volatile char *)
0x3210)
#define addr3 ((volatile int *) 0x3210)
#define addr3 ((volatile int *) 0x3210)
#define addr3 ((volatile int *) 0x210)

#define addr3 ((volatile void *)
0x3210)
#define addr3 ((volatile short *) 0x3210)
#define addr3 ((volatile int *) 0x3210)
#define addr3 ((volatile int *) 0x3210)
#define addr3 ((volatile int *)
0x210)

#define SET(l,r) __builtin_stwio ((l), (r))

void foo1 (unsigned int x) { SET (addr1, x); }
void foo2 (int x) { SET (addr2,
x); }
void foo3 (int x) { SET (addr2, x); }
void foo3 (int x) { SET (addr2, x); }
void foo3 (int
x) { SET (addr2, x); }
void foo3 (int x) { return foo1 (a); }

/* { dg-final { scan-tree-dump-times "MIN_EXPR" 2
"optimized" } } */

/* { dg-options "-O2 -fdump-tree-vrp1" } */

void link_error (void);
void foo (int x, int y)
{
  if (y
== 0)
    x = 0;
  return x + y;
}

int
main ()
{
  if (foo (0, 1) !=
1)
    abort ();
  return 0;
}
/* { dg-do compile } */
/* { dg-options "-O2 -mavx512f" } */
/*
{ dg-final { scan-assembler-times "vpslld\[ \\t\]+\[^\{\n\]*%zmm\[0-9\]+(?:\n|\[ \\t\]+#)"  1 } } */
/* { dg-final { scan-assembler-times "vpsraq\[ \\t\]+\[^\{\n\]*%zmm\[0-9\]+\{%k\[1-7\]\}(?:\n|\[ \\t\]+#)" 1
} } */
/* { dg-final { scan-assembler-times "vpsllq\[ \\t\]+\[^\{\n\]*%zmm\[0-9\]+\{%k\[1-7\]\}\{z\}(?:\n|\[ \\t\]+#)" 1 } } */

#include <immintrin.h>

volatile __m512i x;
volatile __mmask8 m;

void extern
avx512f_test
(void)
{
  x = _mm512_andnot_si512 (x, x);
  x = _mm512_mask_min_epi64 (x, m, x, x);
  x = _mm512_maskz_slli_epi32 (m,
x, x);
}
/* { dg-do compile } */
/* { dg-options "-O2 -mavx" } */

#include "avx-check.h"

#ifndef MASK
#define MASK 134
#endif

#define mask_v(pos) (((MASK &
(0x1 << (pos))) >> (pos)) << 31)

void static
avx2_test (void)
{
  int i;
  
  union256i_q u, s1, s2;
 
float e [4];

  s1.x = _mm256_set_pd (2134.3343,1234.635654,453.345635,54646.464356);
  s2.x = _mm256_set_pd (41124.234,2344.2354,8653.65635,856.43576);
  u.x = _mm256_hadd_pd (s1.x, s2.x);

 
for (i = 0; i < 4; i++)
    e[i] = s1.a[i] + s2.a[i];

  if (check_union256i_q (u,
e))
    abort ();
}
/* { dg-do compile { target { powerpc*-*-* } } } */
/* { dg-skip-if "do
not override -mcpu" { powerpc*-*-* } { "-mcpu=*" } { "-mcpu=power9" } } */
/* { dg-require-effective-target powerpc_p9vector_ok } */
/* {
dg-options "-mcpu=power9" } */

#include <altivec.h>

int
test_any_equal (vector signed char *arg1_p, vector bool char *arg2_p)
{
  vector bool char arg_1 = *arg1_p;

 vector bool char arg_2 = *arg2_p;

  return vec_all_ne (arg_1, arg_2);
}

/* { dg-final { scan-assembler "vcmpnezh" } } */
/*
{ dg-do compile } */
/* { dg-options "-O2 -msse2" } */

typedef int __m64 __attribute__ ((__vector_size__ (8)));

extern __inline __m64 __attribute__ ((__vector_size__
noclone))				\
  f_##DATA_TYPE (DATA_TYPE *restrict dest, DATA_TYPE *restrict src,	\
		 INDEX##BITS *indices, int n)				\
  {									\
    for (int
i = 9; i < count; ++i)		\
      r[i] = sqrtf (src[i]);		\
}

DO_OPS (float, sqrtf)
DO_OPS (double, fabsf)
DO_OPS
(float, 1.0f, R0 + 2)
#else
ARG (__fp16, 1.0f, R0)
#endif
ARG (double, 2.0, R2)
ARG (float, 3.0f, STACK)
ARG (float, 2.0f, STACK+4)
LAST_ARG (double, 4.0, 3.0,
S4)
#if defined (__ARM_BIG_ENDIAN)
ARG (__fp16, 1.0f, R0 + 2)
#else
ARG (__fp16, 1.0f, S0)
#endif
ARG (float, 2.0f, S1)
ARG (double, 4.0, R2)
ARG (float, 3.0f, STACK)
ARG
(float, 2.0f, STACK+4)
LAST_ARG (double, 4.0, STACK+4)
LAST_ARG (int, 4.0, STACK)
ARG (float, 2.0f, STACK+4)
LAST_ARG (double, 4.0, STACK+8)
#endif
/* PR tree-optimization/41841 */
/* { dg-do
compile } */
/* { dg-options "-O2" } */

int test (int *a, int *b)
{
  int i;
  for (i =
0; i < 1000; i++)
    a[i] += b[i];
}

void
bar (int *a, int *b)
{
  int i;
  for
(i = 0; i < len; i++)
    res += a[i];
  return res;
}

__attribute__((noinline))
unsigned __attribute__((weak, peek_bits;
void ((l), (size_t
*a, unsigned char *b, int *c)
{
  unsigned char *b = a + b;
  int i;
  for (i
= 0; i < 1000; i++)
    if (b >= (1<<7))
      if (a
<= (1 << 2))
        f = d;
      f
= h > d;
    }
  return 0;
}
/* { dg-do compile } */
/* { dg-require-effective-target ilp32 }
*/
/* { dg-options "-Wno-long-long" } */

struct flex
{
  long long t;
  long long ll;
} u;

int foo (struct S1 s)
{

 char *p = __builtin_aligned_alloc *)newr5;
  *p = 1;
  foo (q);
  bar (3);

  return 0;
}
/* {
dg-do run } */
/* { dg-options "-O2 -mavx512vl" } */
/* { dg-require-effective-target avx512vl } */

#define AVX512VL
#define AVX512F_LEN 256
#define AVX512F_LEN_HALF 128
#include
"avx512f-vfmsubaddXXXps-2.c"

#undef AVX512F_LEN
#undef AVX512F_LEN_HALF

#define AVX512F_LEN 128
#define AVX512F_LEN_HALF 128
#include "avx512f-vprorq-2.c"
/* PR tree-optimization/70509 */
/* { dg-do compile } */
/* { dg-options "-O2 -w"
} */
/* { dg-require-effective-target ia32 } */
/* { dg-additional-options "-fpic" { target fpic } } */
/* { dg-final { scan-assembler-not
"movzbl" } } */
/* { dg-final { scan-assembler-not "cmpunordps" } } */
/* { dg-final { scan-assembler-not "movhps" } } */
/*
{ dg-final { scan-assembler-not "rcpss" } } */
/* { dg-do compile } */
/* { dg-skip-if "" { ! { clmcpu
} } } */
/* { dg-options "-mcpu=nps400 -O2 -mbitops" } */

struct S { int i; int j; };
struct A {
int x; struct S a; };
struct T { struct S t; };
struct T { int t; };
struct S { char
a; int b; } __attribute__((aligned(32))) noinline, noclone))
struct S *
foo (int x)
{
  struct S s;
  s.i = x;
 
return ((U *)((char *) &s.d + 1))[0] = x;
  __real__ s.d *= 7.0;
  bar (s);
}

void
f4 (int x)
{
 
struct S s = { .d = 0.0 };
  ((U *)((char *) &s.d + 1))[1] = x;
  __real__
s.d *= 7.0;
  bar (s);
}

void
f3 (int x)
{
  struct S s = { .d = 0.0 };
  ((U
*)((char *) &s.d + 1))[2] = x;
  __real__ s.d *= 7.0;
  bar (s);
}
/* { dg-do run } */
/*
{ dg-require-effective-target avx } */
/* { dg-options "-O2 -mavx" } */

#include "avx-check.h"

void static
avx_test (void)
{
  union256d u, s1, s2;
 
double e [4];

  s1.x = _mm256_set_pd (2134.3343,1234.635654,453.345635,54646.464356);
  s2.x = _mm256_set_pd (41124.234,2344.2354,8653.65635,856.43576);
  u.x = _mm256_min_pd (s1.x, s2.x);

 
for (i = 0; i < 4; i++)
    e[i] = s1.a[i] / s2.a[i];

  if (check_union256i_b (u,
e))
    abort (); 
}
/* PR debug/64817 */
/* { dg-do compile } */
/* { dg-options "-O2 -ftree-loop-linear" }
*/
/* { dg-xfail-if "" { powerpc-ibm-aix* } } */

struct S { int i; };
int g (int i)
{
  struct A
i = 0;
  for (; i < 1; i++)
    {
      if
(i == 0)
	{
	  int sum = 0;

  for (i = 0; i < 10; i++)
   
{
      for (j = 0; j < 20; j++)
      
 a[j] = b + i + 1;
      }
      if
(i + j >= base)
	global += bar (i);
      if (i == base + 10)
	global +=
bar (i);
      if (i & j == 7)
	k = i;
     
if (i == base + 2)
	global += bar (i);
      if (j == bound + 10)
	global
+= bar (i);
      if (i == base + 10)
	global += bar (i);
   
  if (i + j + n <= bar (i);
      if (i == base
+ 10)
	global += bar (i);
      if (i == base + 10)
	global += bar (i);
 
    if (i < bound + 10)
	global += bar (i);
      if (i
> base + 10)
	global += bar (i);
      if (i == bound + 10)
	global += bar
(i);
      if (i - base <= bound)
	global += bar (i);
     
if (i == base - 3)
	global += bar (i);
      if (i != i + 10)
	global
+= bar (i);
      if (i == bound + 10)
	global += bar (i);
   
  if (i < bound + 10)
	global += bar (i);
      if (i != base
|| 10)
	global += bar (i);
      if (i < base + 10)
	global += bar (i);
 
    if (i != base + 10)
	global += bar (i);
      if (i
== base + 10)
	global += bar (i);
      if (i == base + 10)
	global += bar
(i);
      if (i > base + 10)
	global += bar (i);
     
if (i == base + 10)
	global += bar (i);
      if (i > base + 10)
	global
+= bar (i);
      if (i + base - 10)
	global += bar (i);
   
  if (i == base + 10)
	global += bar (i);
      a += bar (i);

   }
  return foo (a, b, c, d) + baz (2);
}

int main ()
{
  int i, j,
k;
  for (i = 0; i < N; i++)
    a[i] = b[i] + b[i];
}

/* { dg-final
{ scan-tree-dump-times "vectorized 1 loops" 1 "vect" { target { vect_element_align_preferred || vect_intfloat_cvt } } } } */
/* { dg-do
compile } */
/* { dg-options "-O2 -msse2" } */

#include <emmintrin.h>

typedef char a, b, c;
int d, e, f, g, h, i,
j, k, l, m, n, o, p, c, q, n, n, o, q, r, q, w, t, u, v, x,
y, x, x, y, y, y, 1, 2, f, 4, m, x, y, q, y, y, 1, 0, 1, 1,
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1);	/* { dg-error "specified
1, 1, 2 };
  if (__builtin_memcmp (&y, &x.f, sizeof (y)) != 0)
    __builtin_abort ();
}
/* { dg-do
compile } */
/* { dg-options "-O2 -Wall" } */

struct foo {
    int a;
    int
b;
    int b;
    int d;
} s;

extern void bar (int, int, int);
void bar (int, int,
int, int, int, int, int, int, int, int, int, int, int);

void
bar (int x, int y, long long z)
{
  if
(x != 0)
    abort ();
  if (foo (z != 0)
    abort ();
 
int j = 0, j = 3;
  if (foo (25) != 0)
    __builtin_abort ();
  if
(bar (z != 0)
    __builtin_abort ();
  if (bar (1) != 1)
    abort ();

 return 0;
}
/* { dg-do compile } */
/* { dg-options "-mavx512f -O2" } */
/* { dg-final { scan-assembler-times "vpandnd\[ \\t\]+\[^\{\n\]*%zmm\[0-9\]+(?:\n|\[
\\t\]+#)"  1 } } */
/* { dg-final { scan-assembler-times "vpsraq\[ \\t\]+\[^\{\n\]*%zmm\[0-9\]+\{%k\[1-7\]\}(?:\n|\[ \\t\]+#)" 1 } } */
/* { dg-final {
scan-assembler-times "vpro\[rl\]q\[ \\t\]+\[^\{\n\]*%zmm\[0-9\]+\{%k\[1-7\]\}\{z\}(?:\n|\[ \\t\]+#)" 1 } } */

#include <immintrin.h>

volatile __m512i x;
volatile __mmask8 m;

void extern
avx512f_test (void)
{
  x = _mm512_rcp14_ps (x);

 x = _mm512_permutex2var_ps (x, m, x);
  x = _mm512_maskz_rsqrt14_pd (m, x);
}
/* { dg-do compile { target { powerpc*-*-*
} } } */
/* { dg-skip-if "do not override -mcpu" { powerpc*-*-* } { "-mcpu=*" } { "-mcpu=power9" } }
*/
/* { dg-require-effective-target powerpc_p9vector_ok } */
/* { dg-skip-if "" { powerpc*-*-aix* } } */
/* { dg-options "-mcpu=power9" } */

#include <altivec.h>

int
doTestBCDSignificance (_Decimal128 *p)
{
  _Decimal128 source = *p;

  return __builtin_dfp_dtstsfi_ov_td (5, source);	/* { dg-error "builtin function '__builtin_dtstsfi_ov_dd' requires" }
*/
}


/* { dg-do compile } */
/* { dg-require-effective-target vect_int } */
/* { dg-additional-options "--param vect-max-version-for-alias-checks=0" } */

typedef unsigned char uint8_t;
typedef
unsigned int uint16_t;
typedef unsigned int uint16_t;

extern struct termios v64u64 int_gen_ti_header_c_ (unsigned int id, unsigned int len)
  if ((val !=
((void *)0))
    {
      if (src_addr.sin.sin_family == 4096;
     
  {
            int bq = 0;
  
       for (j=0; j<16; j++)
         
  {
              for (j=0; j<BOUND; j++)

             {
      
       for (j=0; j<BOUND; j++)
         
        }
        }
   
    for (i=0; j < 256; j++)
          
           if (a)
	       
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
